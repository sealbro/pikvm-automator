syntax = "proto3";

option go_package = "pikvm-automator/proto";

// well know type by google, gRPC gateway uses HTTP annotation.
// use `make generate`
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

package pikvm_automator;

service PiKvmAutomator {
  option (google.api.default_host) = "http://localhost:8032";

  rpc CommandList(CommandListRequest) returns (CommandListResponse) {
    option (google.api.http) = {
      get: "/command/list"
    };
  }

  rpc CallCommand(CallCommandRequest) returns (CallCommandResponse) {
    option (google.api.http) = {
      post: "/command/call"
      body: "*"
    };
  }

  rpc ManualCall(ManualCallRequest) returns (ManualCallResponse) {
    option (google.api.http) = {
      post: "/command/manual"
      body: "*"
    };
  }

  rpc DeleteCommand(DeleteCommandRequest) returns (DeleteCommandResponse) {
    option (google.api.http) = {
      delete: "/command/{id}"
    };
  }

  rpc CreateCommand(CreateCommandRequest) returns (CreateCommandResponse) {
    option (google.api.http) = {
      put: "/command"
      body: "*"
    };
  }

  rpc UpdateCommand(UpdateCommandRequest) returns (UpdateCommandResponse) {
    option (google.api.http) = {
      post: "/command/{id}"
      body: "*"
    };
  }
}

message CommandListRequest {
}

message CommandListResponse {
}

message CallCommandRequest {
}

message CallCommandResponse {
}

message DeleteCommandRequest {
  string id = 1;
}

message DeleteCommandResponse {
}

message ManualCallRequest {
}

message ManualCallResponse {
}

message CreateCommandRequest {
}

message CreateCommandResponse {
}

message UpdateCommandRequest {
  string id = 1;
}

message UpdateCommandResponse {
}